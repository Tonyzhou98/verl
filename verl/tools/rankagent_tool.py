import logging
import os
from typing import Any, Optional
from uuid import uuid4

import traceback
from verl.utils.rollout_trace import rollout_trace_op

from .base_tool import BaseTool
from .schemas import OpenAIFunctionToolSchema

logger = logging.getLogger(__name__)
logger.setLevel(os.getenv("VERL_LOGGING_LEVEL", "WARN"))


class RankAgentTool(BaseTool):
    """A tool for executing the Python code generated by the trained model.

    - `to_openai_function_tool_schema`: return the tool schema in OpenAI format.
    - `create`: create a tool instance for a trajectory.
    - `execute`: execute the tool.
    - `calc_reward`: calculate the reward respect to tool state.
    - `release`: release the tool instance.
    """

    def __init__(self, config: dict, tool_schema: OpenAIFunctionToolSchema):
        """
        _tool_schema = OpenAIFunctionToolSchema.model_validate({
            "type": "function",
            "function": {
                "name": "python_code_executor",
                "description": "A tool for executing the Python code generated by the trained model",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "answer": {
                            "type": "string",
                            "description": "The answer to the question",
                        },
                    },
                    "required": ["answer"],
                },
            }
        })
        """
        super().__init__(config, tool_schema)
        self._instance_dict = {}

    def get_openai_tool_schema(self) -> OpenAIFunctionToolSchema:
        return self.tool_schema

    async def create(self, instance_id: Optional[str] = None, ground_truth: Optional[str] = None, **kwargs) -> str:
        if instance_id is None:
            instance_id = str(uuid4())
        self._instance_dict[instance_id] = {
            "response": "",
            "ground_truth": ground_truth,
            "reward": 0.0,
        }
        return instance_id

    @rollout_trace_op
    async def execute(self, instance_id: str, parameters: dict[str, Any], **kwargs) -> tuple[str, float, dict]:
        answer = parameters.get("answer", "")
        if not isinstance(answer, str):
            answer = str(answer)

        # if answer.startswith("#### "):
        #     self._instance_dict[instance_id]["response"] = answer
        # else:
        #     self._instance_dict[instance_id]["response"] = "#### " + answer

        # reward = await self.calc_reward(instance_id)
        # # penalty for non improved answer submission
        # tool_reward = 0.0 if reward > self._instance_dict[instance_id]["reward"] else -0.05
        # # update the reward
        # self._instance_dict[instance_id]["reward"] = reward

        # return f"Current parsed {answer=} {reward=}", tool_reward, {}

        # --- Extract code from <code>...</code> block if present ---
        if "<code>" in answer:
            try:
                if "</code>" in answer:
                    generated_code = answer.split("<code>", 1)[1].split("</code>", 1)[0].strip()
                else:
                    generated_code = answer.split("<code>", 1)[-1].strip()
            except Exception as e:
                return f"Error parsing code from <code> block: {e}", -0.1, {}
        else:
            generated_code = answer.strip()

        # --- Execute the generated code ---
        try:
            local_vars = {}
            exec(generated_code, {}, local_vars)

            if "result" not in local_vars:
                return "Error: Code did not define a `result` variable.", -0.1, {}

            output = local_vars["result"]

            # Convert output to string if needed
            if not isinstance(output, (str, int, float)):
                try:
                    output_display = str(output)
                except Exception:
                    output_display = f"[Unprintable object of type {type(output)}]"
            else:
                output_display = output

            return f"Code executed successfully. Code returned: {output_display}", 1.0, {}

        except Exception as e:
            error_trace = traceback.format_exc()
            return f"Error during code execution: {e}\nTraceback:\n{error_trace}", -0.1, {}

    # async def calc_reward(self, instance_id: str, **kwargs) -> float:
    #     return gsm8k.compute_score(
    #         self._instance_dict[instance_id]["response"],
    #         self._instance_dict[instance_id]["ground_truth"],
    #         method="flexible",
    #         format_score=0.0,
    #         score=1.0,
    #     )

    async def release(self, instance_id: str, **kwargs) -> None:
        del self._instance_dict[instance_id]